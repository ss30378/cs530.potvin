import sys
import time
import socket
from scapy.layers.inet import IP, ICMP
from scapy.sendrecv import sr1
from scapy.config import conf

def traceroute(destination, max_hops=30, timeout=2):
    try:
        dest_ip = socket.gethostbyname(destination)
    except socket.gaierror:
        print(f"Error: Unable to resolve destination: {destination}")
        sys.exit(1)

    print(f"Traceroute to {destination} ({dest_ip}), {max_hops} hops max")

    for ttl in range(1, max_hops + 1):
        pkt = IP(dst=dest_ip, ttl=ttl) / ICMP()
        start_time = time.time()
        
        reply = sr1(pkt, verbose=0, timeout=timeout)
        rtt = (time.time() - start_time) * 1000  # Convert to milliseconds

        if reply is None:
            print(f"{ttl} * Request timed out.")
        elif reply.type == 0:
            print(f"{ttl} {reply.src} RTT={rtt:.3f} ms (Destination reached)")
            break
        else:
            print(f"{ttl} {reply.src} RTT={rtt:.3f} ms")
    else:
        print("Max hops reached without reaching the destination.")

def main():
    import argparse

    parser = argparse.ArgumentParser(description="Traceroute to a destination host")
    parser.add_argument("destination", help="The domain name or IP address of the target host")
    parser.add_argument("-m", "--max-hops", type=int, default=30, help="Specify the maximum number of hops (default: 30)")
    parser.add_argument("-t", "--timeout", type=float, default=2, help="Specify the timeout for each packet (default: 2 seconds)")
    
    args = parser.parse_args()

    traceroute(args.destination, max_hops=args.max_hops, timeout=args.timeout)

if __name__ == "__main__":
    main()

