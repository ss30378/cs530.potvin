import socket
import threading
import time
import random
import datetime

# Constants
HOST = '127.0.0.1'
PORT = 12345
LOG_FILE = 'server_log.txt'
CLIENTS = {}

def log_message(message):
    with open(LOG_FILE, 'a') as f:
        f.write(f"{datetime.datetime.now()}: {message}\n")

def handle_client_messages(server_socket):
    while True:
        data, address = server_socket.recvfrom(1024)
        message = data.decode()
        if message.startswith('R'):
            client_id = message.split()[1]
            CLIENTS[client_id] = address
            print(f"Registered client {client_id} from {address}")
        elif message.startswith('U'):
            client_id = message.split()[1]
            if client_id in CLIENTS:
                del CLIENTS[client_id]
                print(f"Unregistered client {client_id} from {address}")

def send_periodic_messages(server_socket):
    while True:
        if CLIENTS:
            timestamp = datetime.datetime.now().isoformat()
            message = f"Timestamp: {timestamp}"
            for address in CLIENTS.values():
                server_socket.sendto(message.encode(), address)
                log_message(f"Sent to {address}: {message}")
        time.sleep(random.randint(5, 30))

def start_udp_server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    server_socket.bind((HOST, PORT))
    
    print(f"Server listening on {HOST}:{PORT}")
    
    threading.Thread(target=handle_client_messages, args=(server_socket,), daemon=True).start()
    threading.Thread(target=send_periodic_messages, args=(server_socket,), daemon=True).start()

if __name__ == "__main__":
    start_udp_server()
    while True:
        time.sleep(1)  # Keep the server running


#Client Implementation

import socket
import time
import random
import datetime

# Constants
HOST = '127.0.0.1'
PORT = 12345
CLIENT_ID = random.randint(1, 10000)  # Unique client ID
LOG_FILE = 'client_log.txt'

def log_message(message):
    with open(LOG_FILE, 'a') as f:
        f.write(f"{datetime.datetime.now()}: {message}\n")

def start_udp_client():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    # Register the client
    register_message = f"R {CLIENT_ID}"
    client_socket.sendto(register_message.encode(), (HOST, PORT))
    
    end_time = time.time() + random.randint(15, 90)
    last_receive_time = time.time()
    
    try:
        while time.time() < end_time:
            client_socket.settimeout(1.0)
            try:
                data, _ = client_socket.recvfrom(1024)
                message = data.decode()
                log_message(f"Received: {message}")
                # Exponential backoff
                time.sleep(2 ** (time.time() - last_receive_time))
                last_receive_time = time.time()
            except socket.timeout:
                continue
    
    finally:
        # Unregister the client
        unregister_message = f"U {CLIENT_ID}"
        client_socket.sendto(unregister_message.encode(), (HOST, PORT))
        client_socket.close()

if __name__ == "__main__":
    start_udp_client()
